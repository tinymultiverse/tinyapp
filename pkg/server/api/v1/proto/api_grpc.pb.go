// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TinyAppServer_CreateTinyApp_FullMethodName           = "/tiny.app.proto.TinyAppServer/CreateTinyApp"
	TinyAppServer_ListTinyApps_FullMethodName            = "/tiny.app.proto.TinyAppServer/ListTinyApps"
	TinyAppServer_UpdateTinyApp_FullMethodName           = "/tiny.app.proto.TinyAppServer/UpdateTinyApp"
	TinyAppServer_DeleteTinyApp_FullMethodName           = "/tiny.app.proto.TinyAppServer/DeleteTinyApp"
	TinyAppServer_GetTinyAppLogs_FullMethodName          = "/tiny.app.proto.TinyAppServer/GetTinyAppLogs"
	TinyAppServer_GetTinyAppAccessMetrics_FullMethodName = "/tiny.app.proto.TinyAppServer/GetTinyAppAccessMetrics"
	TinyAppServer_GetTinyAppUsageMetrics_FullMethodName  = "/tiny.app.proto.TinyAppServer/GetTinyAppUsageMetrics"
)

// TinyAppServerClient is the client API for TinyAppServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyAppServerClient interface {
	// Creates a new app.
	CreateTinyApp(ctx context.Context, in *CreateTinyAppRequest, opts ...grpc.CallOption) (*CreateTinyAppResponse, error)
	// Gets list of apps
	ListTinyApps(ctx context.Context, in *ListTinyAppsRequest, opts ...grpc.CallOption) (*ListTinyAppsResponse, error)
	// Updates an app
	UpdateTinyApp(ctx context.Context, in *UpdateTinyAppRequest, opts ...grpc.CallOption) (*UpdateTinyAppResponse, error)
	// Deletes an app
	DeleteTinyApp(ctx context.Context, in *DeleteTinyAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTinyAppLogs(ctx context.Context, in *GetTinyAppLogsRequest, opts ...grpc.CallOption) (*GetTinyAppLogsResponse, error)
	// Gets access metrics for a tiny app
	GetTinyAppAccessMetrics(ctx context.Context, in *GetTinyAppAccessMetricsRequest, opts ...grpc.CallOption) (*GetTinyAppAccessMetricsResponse, error)
	// Gets CPU and memory metrics for a tiny app
	GetTinyAppUsageMetrics(ctx context.Context, in *GetTinyAppUsageMetricsRequest, opts ...grpc.CallOption) (*GetTinyAppUsageMetricsResponse, error)
}

type tinyAppServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyAppServerClient(cc grpc.ClientConnInterface) TinyAppServerClient {
	return &tinyAppServerClient{cc}
}

func (c *tinyAppServerClient) CreateTinyApp(ctx context.Context, in *CreateTinyAppRequest, opts ...grpc.CallOption) (*CreateTinyAppResponse, error) {
	out := new(CreateTinyAppResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_CreateTinyApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) ListTinyApps(ctx context.Context, in *ListTinyAppsRequest, opts ...grpc.CallOption) (*ListTinyAppsResponse, error) {
	out := new(ListTinyAppsResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_ListTinyApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) UpdateTinyApp(ctx context.Context, in *UpdateTinyAppRequest, opts ...grpc.CallOption) (*UpdateTinyAppResponse, error) {
	out := new(UpdateTinyAppResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_UpdateTinyApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) DeleteTinyApp(ctx context.Context, in *DeleteTinyAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TinyAppServer_DeleteTinyApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) GetTinyAppLogs(ctx context.Context, in *GetTinyAppLogsRequest, opts ...grpc.CallOption) (*GetTinyAppLogsResponse, error) {
	out := new(GetTinyAppLogsResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_GetTinyAppLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) GetTinyAppAccessMetrics(ctx context.Context, in *GetTinyAppAccessMetricsRequest, opts ...grpc.CallOption) (*GetTinyAppAccessMetricsResponse, error) {
	out := new(GetTinyAppAccessMetricsResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_GetTinyAppAccessMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyAppServerClient) GetTinyAppUsageMetrics(ctx context.Context, in *GetTinyAppUsageMetricsRequest, opts ...grpc.CallOption) (*GetTinyAppUsageMetricsResponse, error) {
	out := new(GetTinyAppUsageMetricsResponse)
	err := c.cc.Invoke(ctx, TinyAppServer_GetTinyAppUsageMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyAppServerServer is the server API for TinyAppServer service.
// All implementations should embed UnimplementedTinyAppServerServer
// for forward compatibility
type TinyAppServerServer interface {
	// Creates a new app.
	CreateTinyApp(context.Context, *CreateTinyAppRequest) (*CreateTinyAppResponse, error)
	// Gets list of apps
	ListTinyApps(context.Context, *ListTinyAppsRequest) (*ListTinyAppsResponse, error)
	// Updates an app
	UpdateTinyApp(context.Context, *UpdateTinyAppRequest) (*UpdateTinyAppResponse, error)
	// Deletes an app
	DeleteTinyApp(context.Context, *DeleteTinyAppRequest) (*emptypb.Empty, error)
	GetTinyAppLogs(context.Context, *GetTinyAppLogsRequest) (*GetTinyAppLogsResponse, error)
	// Gets access metrics for a tiny app
	GetTinyAppAccessMetrics(context.Context, *GetTinyAppAccessMetricsRequest) (*GetTinyAppAccessMetricsResponse, error)
	// Gets CPU and memory metrics for a tiny app
	GetTinyAppUsageMetrics(context.Context, *GetTinyAppUsageMetricsRequest) (*GetTinyAppUsageMetricsResponse, error)
}

// UnimplementedTinyAppServerServer should be embedded to have forward compatible implementations.
type UnimplementedTinyAppServerServer struct {
}

func (UnimplementedTinyAppServerServer) CreateTinyApp(context.Context, *CreateTinyAppRequest) (*CreateTinyAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTinyApp not implemented")
}
func (UnimplementedTinyAppServerServer) ListTinyApps(context.Context, *ListTinyAppsRequest) (*ListTinyAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTinyApps not implemented")
}
func (UnimplementedTinyAppServerServer) UpdateTinyApp(context.Context, *UpdateTinyAppRequest) (*UpdateTinyAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTinyApp not implemented")
}
func (UnimplementedTinyAppServerServer) DeleteTinyApp(context.Context, *DeleteTinyAppRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTinyApp not implemented")
}
func (UnimplementedTinyAppServerServer) GetTinyAppLogs(context.Context, *GetTinyAppLogsRequest) (*GetTinyAppLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinyAppLogs not implemented")
}
func (UnimplementedTinyAppServerServer) GetTinyAppAccessMetrics(context.Context, *GetTinyAppAccessMetricsRequest) (*GetTinyAppAccessMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinyAppAccessMetrics not implemented")
}
func (UnimplementedTinyAppServerServer) GetTinyAppUsageMetrics(context.Context, *GetTinyAppUsageMetricsRequest) (*GetTinyAppUsageMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinyAppUsageMetrics not implemented")
}

// UnsafeTinyAppServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyAppServerServer will
// result in compilation errors.
type UnsafeTinyAppServerServer interface {
	mustEmbedUnimplementedTinyAppServerServer()
}

func RegisterTinyAppServerServer(s grpc.ServiceRegistrar, srv TinyAppServerServer) {
	s.RegisterService(&TinyAppServer_ServiceDesc, srv)
}

func _TinyAppServer_CreateTinyApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTinyAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).CreateTinyApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_CreateTinyApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).CreateTinyApp(ctx, req.(*CreateTinyAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_ListTinyApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTinyAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).ListTinyApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_ListTinyApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).ListTinyApps(ctx, req.(*ListTinyAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_UpdateTinyApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTinyAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).UpdateTinyApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_UpdateTinyApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).UpdateTinyApp(ctx, req.(*UpdateTinyAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_DeleteTinyApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTinyAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).DeleteTinyApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_DeleteTinyApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).DeleteTinyApp(ctx, req.(*DeleteTinyAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_GetTinyAppLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTinyAppLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).GetTinyAppLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_GetTinyAppLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).GetTinyAppLogs(ctx, req.(*GetTinyAppLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_GetTinyAppAccessMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTinyAppAccessMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).GetTinyAppAccessMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_GetTinyAppAccessMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).GetTinyAppAccessMetrics(ctx, req.(*GetTinyAppAccessMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyAppServer_GetTinyAppUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTinyAppUsageMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyAppServerServer).GetTinyAppUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyAppServer_GetTinyAppUsageMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyAppServerServer).GetTinyAppUsageMetrics(ctx, req.(*GetTinyAppUsageMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyAppServer_ServiceDesc is the grpc.ServiceDesc for TinyAppServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyAppServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tiny.app.proto.TinyAppServer",
	HandlerType: (*TinyAppServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTinyApp",
			Handler:    _TinyAppServer_CreateTinyApp_Handler,
		},
		{
			MethodName: "ListTinyApps",
			Handler:    _TinyAppServer_ListTinyApps_Handler,
		},
		{
			MethodName: "UpdateTinyApp",
			Handler:    _TinyAppServer_UpdateTinyApp_Handler,
		},
		{
			MethodName: "DeleteTinyApp",
			Handler:    _TinyAppServer_DeleteTinyApp_Handler,
		},
		{
			MethodName: "GetTinyAppLogs",
			Handler:    _TinyAppServer_GetTinyAppLogs_Handler,
		},
		{
			MethodName: "GetTinyAppAccessMetrics",
			Handler:    _TinyAppServer_GetTinyAppAccessMetrics_Handler,
		},
		{
			MethodName: "GetTinyAppUsageMetrics",
			Handler:    _TinyAppServer_GetTinyAppUsageMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
